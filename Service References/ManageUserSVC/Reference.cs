//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insurance.ManageUserSVC {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManageUser.CustomerData", Namespace="http://schemas.datacontract.org/2004/07/InsuranceService")]
    [System.SerializableAttribute()]
    public partial class ManageUserCustomerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyAffilIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CustIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InsuraceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActivePolicyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPropertyBuyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSecCodeSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PaymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SignUpDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VerifyEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string YourIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationNo {
            get {
                return this.ApplicationNoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNoField, value) != true)) {
                    this.ApplicationNoField = value;
                    this.RaisePropertyChanged("ApplicationNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyAffilID {
            get {
                return this.CompanyAffilIDField;
            }
            set {
                if ((this.CompanyAffilIDField.Equals(value) != true)) {
                    this.CompanyAffilIDField = value;
                    this.RaisePropertyChanged("CompanyAffilID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustID {
            get {
                return this.CustIDField;
            }
            set {
                if ((this.CustIDField.Equals(value) != true)) {
                    this.CustIDField = value;
                    this.RaisePropertyChanged("CustID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InsuraceType {
            get {
                return this.InsuraceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InsuraceTypeField, value) != true)) {
                    this.InsuraceTypeField = value;
                    this.RaisePropertyChanged("InsuraceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActivePolicy {
            get {
                return this.IsActivePolicyField;
            }
            set {
                if ((this.IsActivePolicyField.Equals(value) != true)) {
                    this.IsActivePolicyField = value;
                    this.RaisePropertyChanged("IsActivePolicy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPropertyBuy {
            get {
                return this.IsPropertyBuyField;
            }
            set {
                if ((this.IsPropertyBuyField.Equals(value) != true)) {
                    this.IsPropertyBuyField = value;
                    this.RaisePropertyChanged("IsPropertyBuy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSecCodeSent {
            get {
                return this.IsSecCodeSentField;
            }
            set {
                if ((this.IsSecCodeSentField.Equals(value) != true)) {
                    this.IsSecCodeSentField = value;
                    this.RaisePropertyChanged("IsSecCodeSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdated {
            get {
                return this.LastUpdatedField;
            }
            set {
                if ((this.LastUpdatedField.Equals(value) != true)) {
                    this.LastUpdatedField = value;
                    this.RaisePropertyChanged("LastUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Payment {
            get {
                return this.PaymentField;
            }
            set {
                if ((this.PaymentField.Equals(value) != true)) {
                    this.PaymentField = value;
                    this.RaisePropertyChanged("Payment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonalID {
            get {
                return this.PersonalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalIDField, value) != true)) {
                    this.PersonalIDField = value;
                    this.RaisePropertyChanged("PersonalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityCode {
            get {
                return this.SecurityCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityCodeField, value) != true)) {
                    this.SecurityCodeField = value;
                    this.RaisePropertyChanged("SecurityCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SignUpDate {
            get {
                return this.SignUpDateField;
            }
            set {
                if ((this.SignUpDateField.Equals(value) != true)) {
                    this.SignUpDateField = value;
                    this.RaisePropertyChanged("SignUpDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool VerifyEmail {
            get {
                return this.VerifyEmailField;
            }
            set {
                if ((this.VerifyEmailField.Equals(value) != true)) {
                    this.VerifyEmailField = value;
                    this.RaisePropertyChanged("VerifyEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string YourID {
            get {
                return this.YourIDField;
            }
            set {
                if ((object.ReferenceEquals(this.YourIDField, value) != true)) {
                    this.YourIDField = value;
                    this.RaisePropertyChanged("YourID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManageUser.CoverageData", Namespace="http://schemas.datacontract.org/2004/07/InsuranceService")]
    [System.SerializableAttribute()]
    public partial class ManageUserCoverageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CoverageDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CoverageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CustIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InsuraceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool yr3LossField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool yr5LossField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CoverageDate {
            get {
                return this.CoverageDateField;
            }
            set {
                if ((this.CoverageDateField.Equals(value) != true)) {
                    this.CoverageDateField = value;
                    this.RaisePropertyChanged("CoverageDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CoverageID {
            get {
                return this.CoverageIDField;
            }
            set {
                if ((this.CoverageIDField.Equals(value) != true)) {
                    this.CoverageIDField = value;
                    this.RaisePropertyChanged("CoverageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CustID {
            get {
                return this.CustIDField;
            }
            set {
                if ((this.CustIDField.Equals(value) != true)) {
                    this.CustIDField = value;
                    this.RaisePropertyChanged("CustID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InsuraceType {
            get {
                return this.InsuraceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InsuraceTypeField, value) != true)) {
                    this.InsuraceTypeField = value;
                    this.RaisePropertyChanged("InsuraceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool yr3Loss {
            get {
                return this.yr3LossField;
            }
            set {
                if ((this.yr3LossField.Equals(value) != true)) {
                    this.yr3LossField = value;
                    this.RaisePropertyChanged("yr3Loss");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool yr5Loss {
            get {
                return this.yr5LossField;
            }
            set {
                if ((this.yr5LossField.Equals(value) != true)) {
                    this.yr5LossField = value;
                    this.RaisePropertyChanged("yr5Loss");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManageUser.Documentdata", Namespace="http://schemas.datacontract.org/2004/07/InsuranceService")]
    [System.SerializableAttribute()]
    public partial class ManageUserDocumentdata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MainDocumentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentName {
            get {
                return this.DocumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentNameField, value) != true)) {
                    this.DocumentNameField = value;
                    this.RaisePropertyChanged("DocumentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentPath {
            get {
                return this.DocumentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentPathField, value) != true)) {
                    this.DocumentPathField = value;
                    this.RaisePropertyChanged("DocumentPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Documentid {
            get {
                return this.DocumentidField;
            }
            set {
                if ((this.DocumentidField.Equals(value) != true)) {
                    this.DocumentidField = value;
                    this.RaisePropertyChanged("Documentid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainDocument {
            get {
                return this.MainDocumentField;
            }
            set {
                if ((object.ReferenceEquals(this.MainDocumentField, value) != true)) {
                    this.MainDocumentField = value;
                    this.RaisePropertyChanged("MainDocument");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="usp_GetEvedenceResult", Namespace="http://schemas.datacontract.org/2004/07/InsuranceDAL")]
    [System.SerializableAttribute()]
    public partial class usp_GetEvedenceResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insurance.ManageUserSVC.Binary DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EvideDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EvidenceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastUpdatedDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insurance.ManageUserSVC.Binary Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EvideDate {
            get {
                return this.EvideDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EvideDateField, value) != true)) {
                    this.EvideDateField = value;
                    this.RaisePropertyChanged("EvideDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EvidenceID {
            get {
                return this.EvidenceIDField;
            }
            set {
                if ((this.EvidenceIDField.Equals(value) != true)) {
                    this.EvidenceIDField = value;
                    this.RaisePropertyChanged("EvidenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastUpdatedDate {
            get {
                return this.LastUpdatedDateField;
            }
            set {
                if ((object.ReferenceEquals(this.LastUpdatedDateField, value) != true)) {
                    this.LastUpdatedDateField = value;
                    this.RaisePropertyChanged("LastUpdatedDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Binary", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Linq")]
    [System.SerializableAttribute()]
    public partial class Binary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="usp_GetCertificateByIDResult", Namespace="http://schemas.datacontract.org/2004/07/InsuranceDAL")]
    [System.SerializableAttribute()]
    public partial class usp_GetCertificateByIDResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalLangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CertiDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CretiNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid Cust_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insurance.ManageUserSVC.Binary DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoldrAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoldrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> WaiverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalLang {
            get {
                return this.AdditionalLangField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalLangField, value) != true)) {
                    this.AdditionalLangField = value;
                    this.RaisePropertyChanged("AdditionalLang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CertiDate {
            get {
                return this.CertiDateField;
            }
            set {
                if ((this.CertiDateField.Equals(value) != true)) {
                    this.CertiDateField = value;
                    this.RaisePropertyChanged("CertiDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CretiNo {
            get {
                return this.CretiNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CretiNoField, value) != true)) {
                    this.CretiNoField = value;
                    this.RaisePropertyChanged("CretiNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Cust_ID {
            get {
                return this.Cust_IDField;
            }
            set {
                if ((this.Cust_IDField.Equals(value) != true)) {
                    this.Cust_IDField = value;
                    this.RaisePropertyChanged("Cust_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insurance.ManageUserSVC.Binary Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventFrom {
            get {
                return this.EventFromField;
            }
            set {
                if ((this.EventFromField.Equals(value) != true)) {
                    this.EventFromField = value;
                    this.RaisePropertyChanged("EventFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTo {
            get {
                return this.EventToField;
            }
            set {
                if ((this.EventToField.Equals(value) != true)) {
                    this.EventToField = value;
                    this.RaisePropertyChanged("EventTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoldrAdd {
            get {
                return this.HoldrAddField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldrAddField, value) != true)) {
                    this.HoldrAddField = value;
                    this.RaisePropertyChanged("HoldrAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoldrName {
            get {
                return this.HoldrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldrNameField, value) != true)) {
                    this.HoldrNameField = value;
                    this.RaisePropertyChanged("HoldrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Waiver {
            get {
                return this.WaiverField;
            }
            set {
                if ((this.WaiverField.Equals(value) != true)) {
                    this.WaiverField = value;
                    this.RaisePropertyChanged("Waiver");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="usp_GetCertificatesByCustomerIDResult", Namespace="http://schemas.datacontract.org/2004/07/InsuranceDAL")]
    [System.SerializableAttribute()]
    public partial class usp_GetCertificatesByCustomerIDResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalLangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertiDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CretiIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CretiNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insurance.ManageUserSVC.Binary DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoldrAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HoldrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> WaiverField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalLang {
            get {
                return this.AdditionalLangField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalLangField, value) != true)) {
                    this.AdditionalLangField = value;
                    this.RaisePropertyChanged("AdditionalLang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertiDate {
            get {
                return this.CertiDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CertiDateField, value) != true)) {
                    this.CertiDateField = value;
                    this.RaisePropertyChanged("CertiDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CretiID {
            get {
                return this.CretiIDField;
            }
            set {
                if ((this.CretiIDField.Equals(value) != true)) {
                    this.CretiIDField = value;
                    this.RaisePropertyChanged("CretiID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CretiNo {
            get {
                return this.CretiNoField;
            }
            set {
                if ((object.ReferenceEquals(this.CretiNoField, value) != true)) {
                    this.CretiNoField = value;
                    this.RaisePropertyChanged("CretiNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insurance.ManageUserSVC.Binary Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventFrom {
            get {
                return this.EventFromField;
            }
            set {
                if ((this.EventFromField.Equals(value) != true)) {
                    this.EventFromField = value;
                    this.RaisePropertyChanged("EventFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTo {
            get {
                return this.EventToField;
            }
            set {
                if ((this.EventToField.Equals(value) != true)) {
                    this.EventToField = value;
                    this.RaisePropertyChanged("EventTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoldrAdd {
            get {
                return this.HoldrAddField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldrAddField, value) != true)) {
                    this.HoldrAddField = value;
                    this.RaisePropertyChanged("HoldrAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HoldrName {
            get {
                return this.HoldrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HoldrNameField, value) != true)) {
                    this.HoldrNameField = value;
                    this.RaisePropertyChanged("HoldrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Waiver {
            get {
                return this.WaiverField;
            }
            set {
                if ((this.WaiverField.Equals(value) != true)) {
                    this.WaiverField = value;
                    this.RaisePropertyChanged("Waiver");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="usp_GetEvedenceDataByEVEIDResult", Namespace="http://schemas.datacontract.org/2004/07/InsuranceDAL")]
    [System.SerializableAttribute()]
    public partial class usp_GetEvedenceDataByEVEIDResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid Cust_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Insurance.ManageUserSVC.Binary DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EvideDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastUpdatedDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Cust_ID {
            get {
                return this.Cust_IDField;
            }
            set {
                if ((this.Cust_IDField.Equals(value) != true)) {
                    this.Cust_IDField = value;
                    this.RaisePropertyChanged("Cust_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Insurance.ManageUserSVC.Binary Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EvideDate {
            get {
                return this.EvideDateField;
            }
            set {
                if ((this.EvideDateField.Equals(value) != true)) {
                    this.EvideDateField = value;
                    this.RaisePropertyChanged("EvideDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastUpdatedDate {
            get {
                return this.LastUpdatedDateField;
            }
            set {
                if ((this.LastUpdatedDateField.Equals(value) != true)) {
                    this.LastUpdatedDateField = value;
                    this.RaisePropertyChanged("LastUpdatedDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ManageUserSVC.ManageUser")]
    public interface ManageUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCompany_List", ReplyAction="urn:ManageUser/GetCompany_ListResponse")]
        System.Data.DataSet GetCompany_List();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCompany_List", ReplyAction="urn:ManageUser/GetCompany_ListResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompany_ListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetReport_Data", ReplyAction="urn:ManageUser/GetReport_DataResponse")]
        System.Data.DataSet GetReport_Data(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetReport_Data", ReplyAction="urn:ManageUser/GetReport_DataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetReport_DataAsync(System.DateTime FromDate, System.DateTime ToDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertUser", ReplyAction="urn:ManageUser/InsertUserResponse")]
        bool InsertUser(Insurance.ManageUserSVC.ManageUserCustomerData UserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertUser", ReplyAction="urn:ManageUser/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(Insurance.ManageUserSVC.ManageUserCustomerData UserData);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertCoverageData", ReplyAction="urn:ManageUser/InsertCoverageDataResponse")]
        bool InsertCoverageData(Insurance.ManageUserSVC.ManageUserCoverageData CovData);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertCoverageData", ReplyAction="urn:ManageUser/InsertCoverageDataResponse")]
        System.Threading.Tasks.Task<bool> InsertCoverageDataAsync(Insurance.ManageUserSVC.ManageUserCoverageData CovData);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertDocumentinfo", ReplyAction="urn:ManageUser/InsertDocumentinfoResponse")]
        bool InsertDocumentinfo(Insurance.ManageUserSVC.ManageUserDocumentdata data);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertDocumentinfo", ReplyAction="urn:ManageUser/InsertDocumentinfoResponse")]
        System.Threading.Tasks.Task<bool> InsertDocumentinfoAsync(Insurance.ManageUserSVC.ManageUserDocumentdata data);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_Payment", ReplyAction="urn:ManageUser/Update_PaymentResponse")]
        bool Update_Payment(System.Guid CustID, decimal Payment, bool IsPropertyBuy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_Payment", ReplyAction="urn:ManageUser/Update_PaymentResponse")]
        System.Threading.Tasks.Task<bool> Update_PaymentAsync(System.Guid CustID, decimal Payment, bool IsPropertyBuy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CheckEmailID", ReplyAction="urn:ManageUser/CheckEmailIDResponse")]
        string CheckEmailID(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CheckEmailID", ReplyAction="urn:ManageUser/CheckEmailIDResponse")]
        System.Threading.Tasks.Task<string> CheckEmailIDAsync(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CheckCmpny", ReplyAction="urn:ManageUser/CheckCmpnyResponse")]
        string CheckCmpny(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CheckCmpny", ReplyAction="urn:ManageUser/CheckCmpnyResponse")]
        System.Threading.Tasks.Task<string> CheckCmpnyAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/AdminLogin", ReplyAction="urn:ManageUser/AdminLoginResponse")]
        System.Data.DataSet AdminLogin(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/AdminLogin", ReplyAction="urn:ManageUser/AdminLoginResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> AdminLoginAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/LoginCustomer", ReplyAction="urn:ManageUser/LoginCustomerResponse")]
        System.Data.DataSet LoginCustomer(string EmailID, string SecurCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/LoginCustomer", ReplyAction="urn:ManageUser/LoginCustomerResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> LoginCustomerAsync(string EmailID, string SecurCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCustomerInfo", ReplyAction="urn:ManageUser/GetCustomerInfoResponse")]
        System.Data.DataSet GetCustomerInfo(System.Guid CusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCustomerInfo", ReplyAction="urn:ManageUser/GetCustomerInfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerInfoAsync(System.Guid CusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCustomerInfoByEmailID", ReplyAction="urn:ManageUser/GetCustomerInfoByEmailIDResponse")]
        System.Data.DataSet GetCustomerInfoByEmailID(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCustomerInfoByEmailID", ReplyAction="urn:ManageUser/GetCustomerInfoByEmailIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerInfoByEmailIDAsync(string EmailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetAllCustomers", ReplyAction="urn:ManageUser/GetAllCustomersResponse")]
        System.Data.DataSet GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetAllCustomers", ReplyAction="urn:ManageUser/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCompanyAffilations", ReplyAction="urn:ManageUser/GetCompanyAffilationsResponse")]
        System.Data.DataSet GetCompanyAffilations();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCompanyAffilations", ReplyAction="urn:ManageUser/GetCompanyAffilationsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyAffilationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetDocumentinfo", ReplyAction="urn:ManageUser/GetDocumentinfoResponse")]
        System.Data.DataSet GetDocumentinfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetDocumentinfo", ReplyAction="urn:ManageUser/GetDocumentinfoResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentinfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCoveragebyCustomerId", ReplyAction="urn:ManageUser/GetCoveragebyCustomerIdResponse")]
        System.Data.DataSet GetCoveragebyCustomerId(System.Guid CustID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCoveragebyCustomerId", ReplyAction="urn:ManageUser/GetCoveragebyCustomerIdResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetCoveragebyCustomerIdAsync(System.Guid CustID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/AddUpdateCompany", ReplyAction="urn:ManageUser/AddUpdateCompanyResponse")]
        bool AddUpdateCompany(System.Guid ID, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/AddUpdateCompany", ReplyAction="urn:ManageUser/AddUpdateCompanyResponse")]
        System.Threading.Tasks.Task<bool> AddUpdateCompanyAsync(System.Guid ID, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteCompanyAffilation", ReplyAction="urn:ManageUser/DeleteCompanyAffilationResponse")]
        void DeleteCompanyAffilation(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteCompanyAffilation", ReplyAction="urn:ManageUser/DeleteCompanyAffilationResponse")]
        System.Threading.Tasks.Task DeleteCompanyAffilationAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/SearchCustomers", ReplyAction="urn:ManageUser/SearchCustomersResponse")]
        System.Data.DataSet SearchCustomers(string ApplicationNo, string Name, string EmailID, string YourID, System.Nullable<System.DateTime> CoverDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/SearchCustomers", ReplyAction="urn:ManageUser/SearchCustomersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchCustomersAsync(string ApplicationNo, string Name, string EmailID, string YourID, System.Nullable<System.DateTime> CoverDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteCustomer", ReplyAction="urn:ManageUser/DeleteCustomerResponse")]
        void DeleteCustomer(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteCustomer", ReplyAction="urn:ManageUser/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteDocument", ReplyAction="urn:ManageUser/DeleteDocumentResponse")]
        void DeleteDocument(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/DeleteDocument", ReplyAction="urn:ManageUser/DeleteDocumentResponse")]
        System.Threading.Tasks.Task DeleteDocumentAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CreateEvedenceInfoByCusID", ReplyAction="urn:ManageUser/CreateEvedenceInfoByCusIDResponse")]
        System.Data.DataSet CreateEvedenceInfoByCusID(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/CreateEvedenceInfoByCusID", ReplyAction="urn:ManageUser/CreateEvedenceInfoByCusIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CreateEvedenceInfoByCusIDAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertEvedence", ReplyAction="urn:ManageUser/InsertEvedenceResponse")]
        bool InsertEvedence(System.Guid EvedenceID, System.DateTime EvedenceDate, System.Guid CusID, System.DateTime LastUpdateDate, bool IsSent, bool IsActive, byte[] Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertEvedence", ReplyAction="urn:ManageUser/InsertEvedenceResponse")]
        System.Threading.Tasks.Task<bool> InsertEvedenceAsync(System.Guid EvedenceID, System.DateTime EvedenceDate, System.Guid CusID, System.DateTime LastUpdateDate, bool IsSent, bool IsActive, byte[] Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetEvedenceInfoByCusID", ReplyAction="urn:ManageUser/GetEvedenceInfoByCusIDResponse")]
        System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceResult> GetEvedenceInfoByCusID(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetEvedenceInfoByCusID", ReplyAction="urn:ManageUser/GetEvedenceInfoByCusIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceResult>> GetEvedenceInfoByCusIDAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_Evidence", ReplyAction="urn:ManageUser/Update_EvidenceResponse")]
        bool Update_Evidence(System.Guid CustID, System.Nullable<System.DateTime> LastUpdatedDate, System.Nullable<bool> IsActive, System.Guid EveID, System.Nullable<bool> IsSent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_Evidence", ReplyAction="urn:ManageUser/Update_EvidenceResponse")]
        System.Threading.Tasks.Task<bool> Update_EvidenceAsync(System.Guid CustID, System.Nullable<System.DateTime> LastUpdatedDate, System.Nullable<bool> IsActive, System.Guid EveID, System.Nullable<bool> IsSent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertCertificate", ReplyAction="urn:ManageUser/InsertCertificateResponse")]
        bool InsertCertificate(System.Guid CertID, System.DateTime CertDate, string CertNo, System.DateTime EventFrom, System.DateTime EventTo, string Additional, string holderName, string HolderAdd, System.Guid CustID, byte[] Data, bool Waiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/InsertCertificate", ReplyAction="urn:ManageUser/InsertCertificateResponse")]
        System.Threading.Tasks.Task<bool> InsertCertificateAsync(System.Guid CertID, System.DateTime CertDate, string CertNo, System.DateTime EventFrom, System.DateTime EventTo, string Additional, string holderName, string HolderAdd, System.Guid CustID, byte[] Data, bool Waiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCertificateInfoByCertyID", ReplyAction="urn:ManageUser/GetCertificateInfoByCertyIDResponse")]
        System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificateByIDResult> GetCertificateInfoByCertyID(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCertificateInfoByCertyID", ReplyAction="urn:ManageUser/GetCertificateInfoByCertyIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificateByIDResult>> GetCertificateInfoByCertyIDAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCertificateInfoByCustomerID", ReplyAction="urn:ManageUser/GetCertificateInfoByCustomerIDResponse")]
        System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificatesByCustomerIDResult> GetCertificateInfoByCustomerID(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetCertificateInfoByCustomerID", ReplyAction="urn:ManageUser/GetCertificateInfoByCustomerIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificatesByCustomerIDResult>> GetCertificateInfoByCustomerIDAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetEvedenceInfoByEvedenceID", ReplyAction="urn:ManageUser/GetEvedenceInfoByEvedenceIDResponse")]
        System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceDataByEVEIDResult> GetEvedenceInfoByEvedenceID(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/GetEvedenceInfoByEvedenceID", ReplyAction="urn:ManageUser/GetEvedenceInfoByEvedenceIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceDataByEVEIDResult>> GetEvedenceInfoByEvedenceIDAsync(System.Guid ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_VerificationStatus", ReplyAction="urn:ManageUser/Update_VerificationStatusResponse")]
        bool Update_VerificationStatus(System.Guid CustID, bool VerifyEmail, bool IsSecCodeSent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Update_VerificationStatus", ReplyAction="urn:ManageUser/Update_VerificationStatusResponse")]
        System.Threading.Tasks.Task<bool> Update_VerificationStatusAsync(System.Guid CustID, bool VerifyEmail, bool IsSecCodeSent);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Delete_Evidence", ReplyAction="urn:ManageUser/Delete_EvidenceResponse")]
        bool Delete_Evidence(System.Guid EVEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/Delete_Evidence", ReplyAction="urn:ManageUser/Delete_EvidenceResponse")]
        System.Threading.Tasks.Task<bool> Delete_EvidenceAsync(System.Guid EVEID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/UpdateCertificate", ReplyAction="urn:ManageUser/UpdateCertificateResponse")]
        bool UpdateCertificate(System.Guid CERTIID, byte[] Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:ManageUser/UpdateCertificate", ReplyAction="urn:ManageUser/UpdateCertificateResponse")]
        System.Threading.Tasks.Task<bool> UpdateCertificateAsync(System.Guid CERTIID, byte[] Data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ManageUserChannel : Insurance.ManageUserSVC.ManageUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManageUserClient : System.ServiceModel.ClientBase<Insurance.ManageUserSVC.ManageUser>, Insurance.ManageUserSVC.ManageUser {
        
        public ManageUserClient() {
        }
        
        public ManageUserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManageUserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageUserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageUserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetCompany_List() {
            return base.Channel.GetCompany_List();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompany_ListAsync() {
            return base.Channel.GetCompany_ListAsync();
        }
        
        public System.Data.DataSet GetReport_Data(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReport_Data(FromDate, ToDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetReport_DataAsync(System.DateTime FromDate, System.DateTime ToDate) {
            return base.Channel.GetReport_DataAsync(FromDate, ToDate);
        }
        
        public bool InsertUser(Insurance.ManageUserSVC.ManageUserCustomerData UserData) {
            return base.Channel.InsertUser(UserData);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(Insurance.ManageUserSVC.ManageUserCustomerData UserData) {
            return base.Channel.InsertUserAsync(UserData);
        }
        
        public bool InsertCoverageData(Insurance.ManageUserSVC.ManageUserCoverageData CovData) {
            return base.Channel.InsertCoverageData(CovData);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCoverageDataAsync(Insurance.ManageUserSVC.ManageUserCoverageData CovData) {
            return base.Channel.InsertCoverageDataAsync(CovData);
        }
        
        public bool InsertDocumentinfo(Insurance.ManageUserSVC.ManageUserDocumentdata data) {
            return base.Channel.InsertDocumentinfo(data);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDocumentinfoAsync(Insurance.ManageUserSVC.ManageUserDocumentdata data) {
            return base.Channel.InsertDocumentinfoAsync(data);
        }
        
        public bool Update_Payment(System.Guid CustID, decimal Payment, bool IsPropertyBuy) {
            return base.Channel.Update_Payment(CustID, Payment, IsPropertyBuy);
        }
        
        public System.Threading.Tasks.Task<bool> Update_PaymentAsync(System.Guid CustID, decimal Payment, bool IsPropertyBuy) {
            return base.Channel.Update_PaymentAsync(CustID, Payment, IsPropertyBuy);
        }
        
        public string CheckEmailID(string EmailID) {
            return base.Channel.CheckEmailID(EmailID);
        }
        
        public System.Threading.Tasks.Task<string> CheckEmailIDAsync(string EmailID) {
            return base.Channel.CheckEmailIDAsync(EmailID);
        }
        
        public string CheckCmpny(string Name) {
            return base.Channel.CheckCmpny(Name);
        }
        
        public System.Threading.Tasks.Task<string> CheckCmpnyAsync(string Name) {
            return base.Channel.CheckCmpnyAsync(Name);
        }
        
        public System.Data.DataSet AdminLogin(string Username, string Password) {
            return base.Channel.AdminLogin(Username, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AdminLoginAsync(string Username, string Password) {
            return base.Channel.AdminLoginAsync(Username, Password);
        }
        
        public System.Data.DataSet LoginCustomer(string EmailID, string SecurCode) {
            return base.Channel.LoginCustomer(EmailID, SecurCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> LoginCustomerAsync(string EmailID, string SecurCode) {
            return base.Channel.LoginCustomerAsync(EmailID, SecurCode);
        }
        
        public System.Data.DataSet GetCustomerInfo(System.Guid CusID) {
            return base.Channel.GetCustomerInfo(CusID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerInfoAsync(System.Guid CusID) {
            return base.Channel.GetCustomerInfoAsync(CusID);
        }
        
        public System.Data.DataSet GetCustomerInfoByEmailID(string EmailID) {
            return base.Channel.GetCustomerInfoByEmailID(EmailID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCustomerInfoByEmailIDAsync(string EmailID) {
            return base.Channel.GetCustomerInfoByEmailIDAsync(EmailID);
        }
        
        public System.Data.DataSet GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public System.Data.DataSet GetCompanyAffilations() {
            return base.Channel.GetCompanyAffilations();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCompanyAffilationsAsync() {
            return base.Channel.GetCompanyAffilationsAsync();
        }
        
        public System.Data.DataSet GetDocumentinfo() {
            return base.Channel.GetDocumentinfo();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDocumentinfoAsync() {
            return base.Channel.GetDocumentinfoAsync();
        }
        
        public System.Data.DataSet GetCoveragebyCustomerId(System.Guid CustID) {
            return base.Channel.GetCoveragebyCustomerId(CustID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetCoveragebyCustomerIdAsync(System.Guid CustID) {
            return base.Channel.GetCoveragebyCustomerIdAsync(CustID);
        }
        
        public bool AddUpdateCompany(System.Guid ID, string Description) {
            return base.Channel.AddUpdateCompany(ID, Description);
        }
        
        public System.Threading.Tasks.Task<bool> AddUpdateCompanyAsync(System.Guid ID, string Description) {
            return base.Channel.AddUpdateCompanyAsync(ID, Description);
        }
        
        public void DeleteCompanyAffilation(System.Guid ID) {
            base.Channel.DeleteCompanyAffilation(ID);
        }
        
        public System.Threading.Tasks.Task DeleteCompanyAffilationAsync(System.Guid ID) {
            return base.Channel.DeleteCompanyAffilationAsync(ID);
        }
        
        public System.Data.DataSet SearchCustomers(string ApplicationNo, string Name, string EmailID, string YourID, System.Nullable<System.DateTime> CoverDate) {
            return base.Channel.SearchCustomers(ApplicationNo, Name, EmailID, YourID, CoverDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchCustomersAsync(string ApplicationNo, string Name, string EmailID, string YourID, System.Nullable<System.DateTime> CoverDate) {
            return base.Channel.SearchCustomersAsync(ApplicationNo, Name, EmailID, YourID, CoverDate);
        }
        
        public void DeleteCustomer(System.Guid ID) {
            base.Channel.DeleteCustomer(ID);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(System.Guid ID) {
            return base.Channel.DeleteCustomerAsync(ID);
        }
        
        public void DeleteDocument(int ID) {
            base.Channel.DeleteDocument(ID);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(int ID) {
            return base.Channel.DeleteDocumentAsync(ID);
        }
        
        public System.Data.DataSet CreateEvedenceInfoByCusID(System.Guid ID) {
            return base.Channel.CreateEvedenceInfoByCusID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CreateEvedenceInfoByCusIDAsync(System.Guid ID) {
            return base.Channel.CreateEvedenceInfoByCusIDAsync(ID);
        }
        
        public bool InsertEvedence(System.Guid EvedenceID, System.DateTime EvedenceDate, System.Guid CusID, System.DateTime LastUpdateDate, bool IsSent, bool IsActive, byte[] Data) {
            return base.Channel.InsertEvedence(EvedenceID, EvedenceDate, CusID, LastUpdateDate, IsSent, IsActive, Data);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEvedenceAsync(System.Guid EvedenceID, System.DateTime EvedenceDate, System.Guid CusID, System.DateTime LastUpdateDate, bool IsSent, bool IsActive, byte[] Data) {
            return base.Channel.InsertEvedenceAsync(EvedenceID, EvedenceDate, CusID, LastUpdateDate, IsSent, IsActive, Data);
        }
        
        public System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceResult> GetEvedenceInfoByCusID(System.Guid ID) {
            return base.Channel.GetEvedenceInfoByCusID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceResult>> GetEvedenceInfoByCusIDAsync(System.Guid ID) {
            return base.Channel.GetEvedenceInfoByCusIDAsync(ID);
        }
        
        public bool Update_Evidence(System.Guid CustID, System.Nullable<System.DateTime> LastUpdatedDate, System.Nullable<bool> IsActive, System.Guid EveID, System.Nullable<bool> IsSent) {
            return base.Channel.Update_Evidence(CustID, LastUpdatedDate, IsActive, EveID, IsSent);
        }
        
        public System.Threading.Tasks.Task<bool> Update_EvidenceAsync(System.Guid CustID, System.Nullable<System.DateTime> LastUpdatedDate, System.Nullable<bool> IsActive, System.Guid EveID, System.Nullable<bool> IsSent) {
            return base.Channel.Update_EvidenceAsync(CustID, LastUpdatedDate, IsActive, EveID, IsSent);
        }
        
        public bool InsertCertificate(System.Guid CertID, System.DateTime CertDate, string CertNo, System.DateTime EventFrom, System.DateTime EventTo, string Additional, string holderName, string HolderAdd, System.Guid CustID, byte[] Data, bool Waiver) {
            return base.Channel.InsertCertificate(CertID, CertDate, CertNo, EventFrom, EventTo, Additional, holderName, HolderAdd, CustID, Data, Waiver);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCertificateAsync(System.Guid CertID, System.DateTime CertDate, string CertNo, System.DateTime EventFrom, System.DateTime EventTo, string Additional, string holderName, string HolderAdd, System.Guid CustID, byte[] Data, bool Waiver) {
            return base.Channel.InsertCertificateAsync(CertID, CertDate, CertNo, EventFrom, EventTo, Additional, holderName, HolderAdd, CustID, Data, Waiver);
        }
        
        public System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificateByIDResult> GetCertificateInfoByCertyID(System.Guid ID) {
            return base.Channel.GetCertificateInfoByCertyID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificateByIDResult>> GetCertificateInfoByCertyIDAsync(System.Guid ID) {
            return base.Channel.GetCertificateInfoByCertyIDAsync(ID);
        }
        
        public System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificatesByCustomerIDResult> GetCertificateInfoByCustomerID(System.Guid ID) {
            return base.Channel.GetCertificateInfoByCustomerID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetCertificatesByCustomerIDResult>> GetCertificateInfoByCustomerIDAsync(System.Guid ID) {
            return base.Channel.GetCertificateInfoByCustomerIDAsync(ID);
        }
        
        public System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceDataByEVEIDResult> GetEvedenceInfoByEvedenceID(System.Guid ID) {
            return base.Channel.GetEvedenceInfoByEvedenceID(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Insurance.ManageUserSVC.usp_GetEvedenceDataByEVEIDResult>> GetEvedenceInfoByEvedenceIDAsync(System.Guid ID) {
            return base.Channel.GetEvedenceInfoByEvedenceIDAsync(ID);
        }
        
        public bool Update_VerificationStatus(System.Guid CustID, bool VerifyEmail, bool IsSecCodeSent) {
            return base.Channel.Update_VerificationStatus(CustID, VerifyEmail, IsSecCodeSent);
        }
        
        public System.Threading.Tasks.Task<bool> Update_VerificationStatusAsync(System.Guid CustID, bool VerifyEmail, bool IsSecCodeSent) {
            return base.Channel.Update_VerificationStatusAsync(CustID, VerifyEmail, IsSecCodeSent);
        }
        
        public bool Delete_Evidence(System.Guid EVEID) {
            return base.Channel.Delete_Evidence(EVEID);
        }
        
        public System.Threading.Tasks.Task<bool> Delete_EvidenceAsync(System.Guid EVEID) {
            return base.Channel.Delete_EvidenceAsync(EVEID);
        }
        
        public bool UpdateCertificate(System.Guid CERTIID, byte[] Data) {
            return base.Channel.UpdateCertificate(CERTIID, Data);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCertificateAsync(System.Guid CERTIID, byte[] Data) {
            return base.Channel.UpdateCertificateAsync(CERTIID, Data);
        }
    }
}
